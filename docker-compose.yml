version: '3'
services:
    pgsql:
        image: 'postgres:13'
        container_name: pgsql
        ports:
            - '${FORWARD_DB_PORT:-5432}:5432'
        environment:
            PGPASSWORD: '${DB_PASSWORD:-secret}'
            POSTGRES_DB: '${DB_DATABASE}'
            POSTGRES_USER: '${DB_USERNAME}'
            POSTGRES_PASSWORD: '${DB_PASSWORD:-secret}'
        volumes:
            - 'sailpgsql:/var/lib/postgresql/data'
        networks:
            - laravel-php-nginx
        healthcheck:
            test: ["CMD", "pg_isready", "-q", "-d", "${DB_DATABASE}", "-U", "${DB_USERNAME}"]
            retries: 3
            timeout: 5s
    redis:
        image: 'redis:alpine'
        container_name: redis
        ports:
            - '${FORWARD_REDIS_PORT:-6379}:6379'
        networks:
            - laravel-php-nginx
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            retries: 3
            timeout: 5s
    argo.fastapi:
        container_name: argo_fastapi
        build:
            context: ../fastapi-argo
            dockerfile: Dockerfile
        ports:
            - '5001:5001'
        volumes:
            - '../fastapi-argo:/code'
        networks:
            - laravel-php-nginx           
    laravel.dev:
        container_name: laravel_sail
        build:
            context: ./docker/8.1
            dockerfile: Dockerfile
            args:
                WWWGROUP: '${WWWGROUP}'
                XDEBUG: ${SAIL_DEBUG}
        image: sail-8.1/app
        ports:
            - '${APP_PORT:-80}:80'
        environment:
            WWWUSER: '${WWWUSER}'
            LARAVEL_SAIL: 1
            # XDEBUG_MODE: '${SAIL_XDEBUG_MODE:-off}'
            # XDEBUG_CONFIG: '${SAIL_XDEBUG_CONFIG:-client_host=host.docker.internal}'
        volumes:
            - '.:/var/www/html'
            # - ./vendor:/var/www/html/vendor
        networks:
            - laravel-php-nginx
        depends_on:
            - pgsql
            - redis            
    php:
        profiles:
            - donotstart    
        build:
            context: .
            dockerfile: ./resources/ops/app/Dockerfile
        container_name: php
        volumes: 
            - '.:/var/www/html'
        ports: 
            - "9000:9000"
        networks: 
            - laravel-php-nginx
    nginx:
        profiles:
            - donotstart
        build:
            context: .
            dockerfile: ./resources/ops/nginx/Dockerfile
        container_name: nginx
        volumes:
            - ./resources/ops/nginx/default.conf:/etc/nginx/conf.d/default.conf
            - ./public/build:/var/www/html/build
        ports:
            - ${APP_PORT}:80
        environment:
            - NGINX_PORT=80
        networks: 
            - laravel-php-nginx
    mysql:
        profiles:
            - donotstart    
        image: 'mysql:8.0.29'
        container_name: mysql
        ports:
            - '${FORWARD_DB_PORT:-3306}:3306'
        environment:
            MYSQL_ROOT_PASSWORD: '${DB_PASSWORD}'
            MYSQL_DATABASE: '${DB_DATABASE}'
            MYSQL_USER: '${DB_USERNAME}'
            MYSQL_PASSWORD: '${DB_PASSWORD}'
            MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'
        volumes:
            - 'sailmysql:/var/lib/mysql'
        networks:
            - laravel-php-nginx
        healthcheck:
            test: ["CMD", "mysqladmin", "ping", "-p${DB_PASSWORD}"]
            retries: 3
            timeout: 5s            
    mailhog:
        image: 'mailhog/mailhog:latest'
        container_name: mailhog
        ports:
            - '${FORWARD_MAILHOG_PORT:-1025}:1025'
            - '${FORWARD_MAILHOG_DASHBOARD_PORT:-8025}:8025'
        networks:
           - laravel-php-nginx
    minio:
        profiles:
            - donotstart
        image: 'minio/minio:latest'
        ports:
            - '${MINIO_PORT:-9000}:9000'
            - '${FORWARD_MINIO_PORT:-9001}:9001'
        environment:
            MINIO_ROOT_USER: '${MINIO_ROOT_USER}'
            MINIO_ROOT_PASSWORD: '${MINIO_ROOT_PASSWORD}'
            MINIO_STORAGE_USE_HTTPS: 'false'
        volumes:
            - 'sailminio:/data'
        networks:
            - laravel-php-nginx
        command: ["server", "--console-address", ":9001","/data"]
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
            interval: 30s
            timeout: 20s
            retries: 3
    meilisearch:
        profiles:
            - donotstart
        image: 'getmeili/meilisearch:latest'
        ports:
            - '${FORWARD_MEILISEARCH_PORT:-7700}:7700'
        volumes:
            - 'sailmeilisearch:/data.ms'
        networks:
            - laravel-php-nginx
        healthcheck:
          test: ["CMD", "wget", "--no-verbose", "--spider",  "http://localhost:7700/health"]
          retries: 3
          timeout: 5s
    rabbit:
        profiles:
            - donotstart
        hostname: 'rabbit'
        image: rabbitmq:3.8.5-management
        healthcheck:
            test: rabbitmq-diagnostics -q ping
            interval: 30s
            timeout: 30s
            retries: 3
        ports:
            - '5672:5672'
            - '15672:15672'
            # - '15671:15671'
            # - '5671:5671'
        volumes:
        - 'rabbitdata:/var/lib/rabbitmq/mnesia/'
        networks:
        - laravel-php-nginx
volumes:
    sailvendor:
        driver: local
    sailpgsql:
        driver: local
    sailmysql:
        driver: local
    sailminio:
        driver: local
    sailmeilisearch:
        driver: local
    rabbitdata:
        driver: local

# Create a bridged network to be used by containers.
# This will allow us to easily target other containers in the same stack
networks:
    laravel-php-nginx:
        driver: bridge
