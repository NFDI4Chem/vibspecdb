version: '3'
services:
    pgsql:
        image: 'postgres:13'
        ports:
            - '${FORWARD_DB_PORT:-5432}:5432'
        environment:
            PGPASSWORD: '${DB_PASSWORD:-secret}'
            POSTGRES_DB: '${DB_DATABASE}'
            POSTGRES_USER: '${DB_USERNAME}'
            POSTGRES_PASSWORD: '${DB_PASSWORD:-secret}'
        volumes:
            - 'sailpgsql:/var/lib/postgresql/data'
        networks:
            - laravel-in-kubernetes
        healthcheck:
            test: ["CMD", "pg_isready", "-q", "-d", "${DB_DATABASE}", "-U", "${DB_USERNAME}"]
            retries: 3
            timeout: 5s
    redis:
        image: 'redis:alpine'
        container_name: redis_server
        ports:
            - '${FORWARD_REDIS_PORT:-6379}:6379'
        # volumes:
        #     - 'sailredis:/data'
        networks:
            - laravel-in-kubernetes
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            retries: 3
            timeout: 5s
    laravel.fpm:
        build:
            context: .
            target: fpm_server
        image: laravel-in-kubernetes/fpm_server
        environment:
            APP_DEBUG: "true"
            # REDIS_URL: "redis://redis:6379"
        volumes:
            # Here we mount in our codebase so any changes are immediately reflected into the container
            - '.:/opt/apps/laravel-in-kubernetes'
        networks:
            - laravel-in-kubernetes
    laravel.web:
        build:
            context: .
            target: web_server
        image: laravel-in-kubernetes/web_server
        ports:
            - '8080:80'
        environment:
            # We need to pass in the new FOM hst as the name of the fpm container on port 9000
            FPM_HOST: "laravel.fpm:9000"
            # REDIS_URL: "redis://redis:6379"
        depends_on:
            - laravel.fpm
            - redis
            - pgsql
        volumes:
            # Here we mount in our codebase so any changes are immediately reflected into the container
            - './public:/opt/apps/laravel-in-kubernetes/public'
        networks:
            - laravel-in-kubernetes
    laravel.cron:
        build:
            context: .
            target: cron
        image: laravel-in-kubernetes/cron
        volumes:
            # Here we mount in our codebase so any changes are immediately reflected into the container
            - '.:/opt/apps/laravel-in-kubernetes'
        networks:
            - laravel-in-kubernetes
    mailhog:
        image: 'mailhog/mailhog:latest'
        ports:
            - '${FORWARD_MAILHOG_PORT:-1025}:1025'
            - '${FORWARD_MAILHOG_DASHBOARD_PORT:-8025}:8025'
        networks:
            - laravel-in-kubernetes

volumes:
    sailpgsql:
        driver: local

# Create a bridged network to be used by containers.
# This will allow us to easily target other containers in the same stack
networks:
    laravel-in-kubernetes:
        driver: bridge
