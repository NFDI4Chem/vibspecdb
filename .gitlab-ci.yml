
variables:
    APP_NAME: "serviceapp_laravel_fpm"
    APP_DOCKER_PATH: "${CI_PROJECT_DIR}/resources/ops/app"
    TAG: "v0.1.0"
    DOCKER_REGISTRY: docker.photonicdata.science
    http_proxy: ${CI_PROXY}
    https_proxy: ${CIS_PROXY}
    no_proxy: ${DOCKER_REGISTRY}
    NGINX_TAG: "v0.1.2"
    NGINX_IMAGE_NAME: "serviceapp_nginx"
    NGINX_DOCKER_PATH: "${CI_PROJECT_DIR}/resources/ops/nginx"

image:
  name: gcr.io/kaniko-project/executor:v1.7.0-debug
  entrypoint: [""]
stages:
  - build_assets
  - build_images
  - redeploy
before_script:
  - TAG=$(sed -n 2p version.txt)
  - NGINX_TAG=$(sed -n 4p version.txt)
build-assets:  
  stage: build_assets
  image: node:16.13.1-alpine3.13
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    - npm config set proxy ${CI_PROXY} && npm config set https-proxy ${CIS_PROXY}
    - npm ci
    - npm run build
  artifacts:
    name: "compiled-public"
    paths: 
      - public/*
    expire_in: 3 hrs
.build-app: 
  stage: build_images
  before_script:
    - TAG=$(sed -n 2p version.txt)
  only:
    - deployment
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    - mkdir -p /kaniko/.docker
    - sleep 10 m
    - cp compiled-public/public/build /var/www/html/public/build
    - |-
       KANIKOPROXYBUILDARGS=""
       KANIKOCFG="\"auths\":{\"${DOCKER_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${DOCKER_USER}" "${DOCKER_PASS}" | base64 | tr -d '\n')\"}}"
       if [ "x${http_proxy}" != "x" -o "x${https_proxy}" != "x" ]; then
         KANIKOCFG="${KANIKOCFG}, \"proxies\": { \"default\": { \"httpProxy\": \"${http_proxy}\", \"httpsProxy\": \"${https_proxy}\", \"noProxy\": \"${no_proxy}\"}}"
         KANIKOPROXYBUILDARGS="--build-arg=\"http_proxy=${http_proxy}\" --build-arg=\"https_proxy=${https_proxy}\" --build-arg=\"no_proxy=${no_proxy}\""
       fi
       KANIKOCFG="{ ${KANIKOCFG} }"
       echo "${KANIKOCFG}" > /kaniko/.docker/config.json
    - >-
      /kaniko/executor
      --force
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${APP_DOCKER_PATH}/Dockerfile"
      --destination "${DOCKER_REGISTRY}/${APP_NAME}:${CI_COMMIT_TAG}"
      --destination "${DOCKER_REGISTRY}/${APP_NAME}:${TAG}"
      --destination "${DOCKER_REGISTRY}/${APP_NAME}:latest"
      "${KANIKOPROXYBUILDARGS}"
      --build-arg="PPROXY=${CI_PROXY}"
      --build-arg="PSPROXY=${CIS_PROXY}"
.build-nginx:  
  stage: build_images
  before_script:
    - NGINX_TAG=$(sed -n 4p version.txt)
  only:
    - deployment
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    - mkdir -p /kaniko/.docker
    - |-
       KANIKOPROXYBUILDARGS=""
       KANIKOCFG="\"auths\":{\"${DOCKER_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${DOCKER_USER}" "${DOCKER_PASS}" | base64 | tr -d '\n')\"}}"
       if [ "x${http_proxy}" != "x" -o "x${https_proxy}" != "x" ]; then
         KANIKOCFG="${KANIKOCFG}, \"proxies\": { \"default\": { \"httpProxy\": \"${http_proxy}\", \"httpsProxy\": \"${https_proxy}\", \"noProxy\": \"${no_proxy}\"}}"
         KANIKOPROXYBUILDARGS="--build-arg=\"http_proxy=${http_proxy}\" --build-arg=\"https_proxy=${https_proxy}\" --build-arg=\"no_proxy=${no_proxy}\""
       fi
       KANIKOCFG="{ ${KANIKOCFG} }"
       echo "${KANIKOCFG}" > /kaniko/.docker/config.json
    - >-
      /kaniko/executor
      --force
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${NGINX_DOCKER_PATH}/Dockerfile"
      --destination "${DOCKER_REGISTRY}/${NGINX_IMAGE_NAME}:${CI_COMMIT_TAG}"
      --destination "${DOCKER_REGISTRY}/${NGINX_IMAGE_NAME}:${NGINX_TAG}"
      --destination "${DOCKER_REGISTRY}/${NGINX_IMAGE_NAME}:latest"
      "${KANIKOPROXYBUILDARGS}"
      --build-arg="PPROXY=${CI_PROXY}"
      --build-arg="PSPROXY=${CIS_PROXY}"
.rancher-redeploy:
  image: debian:latest
  only:
    - deployment
  stage: redeploy
  script:
    - apt update
    - apt install curl -y
    - curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
    - chmod +x /usr/local/bin/argocd
    - argocd app set serviceapp-laravel -p image.app.tag=${TAG} --server ${ARGOCD_SERVER} --auth-token ${ARGOCD_TOKEN}
    - argocd app set serviceapp-laravel -p image.nginx.tag=${NGINX_TAG} --server ${ARGOCD_SERVER} --auth-token ${ARGOCD_TOKEN}
